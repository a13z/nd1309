// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof
var Verifier = artifacts.require('Verifier');
const fs = require('fs');

contract('Verifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    describe('Test verification', function () {
        beforeEach(async function () { 
            this.contract = await Verifier.new({from: account_one});
        })

        it('verification with correct proof', async function () { 
            // ARRANGE
            proof = JSON.parse(fs.readFileSync(__dirname + '/../../zokrates/code/proof_3.json'));

            // ACT
            let result = await this.contract.verifyTx.call(proof['proof']['a'], proof['proof']['b'], proof['proof']['c'], proof['inputs']);
            console.log(result);
            // ASSERT
            assert.equal(result, true, "Proof is correct");
        })

        it('verification with incorrect proof', async function () { 
            // ARRANGE
            proof = JSON.parse(fs.readFileSync(__dirname + '/../../zokrates/code/proof_3_wrong.json'));

            // ACT
            let result = await this.contract.verifyTx.call(proof['proof']['a'], proof['proof']['b'], proof['proof']['c'],  proof['inputs']);
            console.log(result);

            // ASSERT
            assert.equal(result, false, "Proof is incorrect");
        })
    });
})